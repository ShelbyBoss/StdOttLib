        private static IEnumerable<string> GetMultipleValueConverter(int c, bool uwp)
        {
            yield return "using StdOttStandard.Equal;";
            yield return "using System.Collections.Generic;";
            yield return "using System.Linq;";

            if (uwp) yield return "using Windows.UI.Xaml;";
            else yield return "using System.Windows;";

            yield return "";

            if (uwp) yield return "namespace StdOttUwp.Converters";
            else yield return "namespace StdOttFramework.Converters";

            yield return "{";
            yield return string.Format("\tpublic delegate object ConvertInputs{0}EventHandler(", c) + Join(", ", "object input{0}", c) + ", int changedInput);";
            yield return string.Format("\tpublic delegate object ConvertInputs{0}RefEventHandler(", c) + Join(", ", "ref object input{0}", c) + ", int changedInput);";
            yield return "";
            yield return string.Format("\tpublic class MultipleInputs{0}Converter : FrameworkElement", c);
            yield return "\t{";
            yield return "\t\tpublic static readonly DependencyProperty OutputProperty = DependencyProperty.Register(\"Output\",";
            yield return string.Format("\t\t\ttypeof(object), typeof(MultipleInputs{0}Converter), new PropertyMetadata(null));", c);

            for (int i = 0; i < c; i++)
            {
                yield return "";
                yield return string.Format("\t\tpublic static readonly DependencyProperty Input{0}Property =", i);
                yield return string.Format("\t\t\tDependencyProperty.Register(\"Input{0}\", typeof(object), typeof(MultipleInputs{1}Converter),", i, c);
                yield return string.Format("\t\t\t\tnew PropertyMetadata(null, new PropertyChangedCallback(OnInput{0}PropertyChanged)));\r\n", i);
                yield return "";
                yield return string.Format("\t\tprivate static void OnInput{0}PropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)", i);
                yield return "\t\t{";
                yield return string.Format("\t\t\t((MultipleInputs{0}Converter)sender).SetOutput({1});", c, i);
                yield return "\t\t}";
            }

            yield return "";
            yield return "\t\tprivate bool isUpdating;";
            yield return string.Format("\t\tprivate readonly List<ConvertInputs{0}EventHandler> converts = new List<ConvertInputs{0}EventHandler>();", c);
            yield return string.Format("\t\tprivate readonly List<ConvertInputs{0}RefEventHandler> convertRefs = new List<ConvertInputs{0}RefEventHandler>();", c);
            yield return "";
            yield return string.Format("\t\tpublic event ConvertInputs{0}EventHandler Convert", c);
            yield return "\t\t{";
            yield return "\t\t\tadd";
            yield return "\t\t\t{";
            yield return "\t\t\t\tconverts.Add(value);";
            yield return "\t\t\t\tSetOutput(-1);";
            yield return "\t\t\t}";
            yield return "\t\t\tremove";
            yield return "\t\t\t{";
            yield return "\t\t\t\tconverts.Remove(value);";
            yield return "\t\t\t\tSetOutput(-1);";
            yield return "\t\t\t}";
            yield return "\t\t}";
            yield return "";
            yield return string.Format("\t\tpublic event ConvertInputs{0}RefEventHandler ConvertRef", c);
            yield return "\t\t{";
            yield return "\t\t\tadd";
            yield return "\t\t\t{";
            yield return "\t\t\t\tconvertRefs.Add(value);";
            yield return "\t\t\t\tSetOutput(-1);";
            yield return "\t\t\t}";
            yield return "\t\t\tremove";
            yield return "\t\t\t{";
            yield return "\t\t\t\tconvertRefs.Remove(value);";
            yield return "\t\t\t\tSetOutput(-1);";
            yield return "\t\t\t}";
            yield return "\t\t}";
            yield return "";
            yield return "\t\tpublic object Output";
            yield return "\t\t{";
            yield return "\t\t\tget => GetValue(OutputProperty);";
            yield return "\t\t\tset => SetValue(OutputProperty, value);";
            yield return "\t\t}";

            for (int i = 0; i < c; i++)
            {
                yield return "";
                yield return string.Format("\t\tpublic object Input{0}", i);
                yield return "\t\t{";
                yield return "\t\t\tget => GetValue(Input" + i + "Property);";
                yield return "\t\t\tset => SetValue(Input" + i + "Property, value);";
                yield return "\t\t}";
            }

            yield return "";
            yield return "\t\tprivate void SetOutput(int changedIndex)";
            yield return "\t\t{";
            yield return "\t\t\tif (converts.Count > 0) SetOutputNonRef(changedIndex);";
            yield return "\t\t\telse if (convertRefs.Count > 0) SetOutputRef(changedIndex);";
            yield return "\t\t\telse Output = null;";
            yield return "\t\t}";
            yield return "";
            yield return "\t\tprivate void SetOutputNonRef(int changedIndex)";
            yield return "\t\t{";
            yield return "\t\t\tOutput = converts.Last()(" + Join(", ", "Input{0}", c) + ", changedIndex);";
            yield return "\t\t}";
            yield return "";
            yield return "\t\tprivate void SetOutputRef(int changedIndex)";
            yield return "\t\t{";
            yield return "\t\t\tif (isUpdating) return;";
            yield return "\t\t\tisUpdating = true;";
            yield return "";
            yield return "\t\t\tobject " + Join(", ", "input{0} = Input{0}", c) + ";";
            yield return "";
            yield return "\t\t\tOutput = convertRefs.Last()(" + Join(", ", "ref input{0}", c) + ", changedIndex);";
            yield return "";

            for (int i = 0; i < c; i++)
            {
                yield return string.Format("\t\t\tif (!CompareUtils.ReferenceEqualsOrEquals(Input{0}, input{0})) Input{0} = input{0};", i);
            }

            yield return "";
            yield return "\t\t\tisUpdating = false;";
            yield return "\t\t}";
            yield return "\t}";
            yield return "}";
        }