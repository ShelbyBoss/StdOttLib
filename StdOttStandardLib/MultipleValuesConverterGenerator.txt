private static IEnumerable<string> GetMultipleValueConverter(int c)
        {
            yield return "using System.Collections.Generic;";
            yield return "using System.Linq;";
            yield return "using System.Windows;";
            //yield return "using Windows.UI.Xaml;";
            yield return "";
            yield return "namespace StdOttFramework.Converters";
            //yield return "namespace StdOttUwp.Converters";
            yield return "{";
            yield return string.Format("public delegate object ConvertInputs{0}EventHandler(", c) + Join(", ", "object input{0}", c) + ");";
            yield return string.Format("public delegate object ConvertInputs{0}RefEventHandler(", c) + Join(", ", "ref object input{0}", c) + ");";
            yield return "";
            yield return string.Format("public class MultipleInputs{0}Converter : FrameworkElement", c);
            yield return "{";
            yield return "public static readonly DependencyProperty OutputProperty = DependencyProperty.Register(\"Output\",";
            yield return string.Format("    typeof(object), typeof(MultipleInputs{0}Converter), new PropertyMetadata(null));", c);

            for (int i = 0; i < c; i++)
            {
                yield return "";
                yield return string.Format("public static readonly DependencyProperty Input{0}Property =", i);
                yield return string.Format("    DependencyProperty.Register(\"Input{0}\", typeof(object), typeof(MultipleInputs{1}Converter),", i, c);
                yield return string.Format("        new PropertyMetadata(null, new PropertyChangedCallback(OnInputXPropertyChanged)));\r\n", c);
            }

            yield return "";
            yield return "private static void OnInputXPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)";
            yield return "{";
            yield return string.Format("((MultipleInputs{0}Converter)sender).SetOutput();", c);
            yield return "}";
            yield return "";
            yield return "private bool isUpdating;";
            yield return string.Format("private List<ConvertInputs{0}EventHandler> converts = new List<ConvertInputs{0}EventHandler>();", c);
            yield return string.Format("private List<ConvertInputs{0}RefEventHandler> convertRefs = new List<ConvertInputs{0}RefEventHandler>();", c);
            yield return "";
            yield return string.Format("public event ConvertInputs{0}EventHandler Convert", c);
            yield return "{";
            yield return "add";
            yield return "{";
            yield return "converts.Add(value);";
            yield return "SetOutput();";
            yield return "}";
            yield return "remove";
            yield return "{";
            yield return "converts.Remove(value);";
            yield return "SetOutput();";
            yield return "}";
            yield return "}";
            yield return "";
            yield return string.Format("public event ConvertInputs{0}RefEventHandler ConvertRef", c);
            yield return "{";
            yield return "add";
            yield return "{";
            yield return "convertRefs.Add(value);";
            yield return "SetOutput();";
            yield return "}";
            yield return "remove";
            yield return "{";
            yield return "convertRefs.Remove(value);";
            yield return "SetOutput();";
            yield return "}";
            yield return "}";
            yield return "";
            yield return "public object Output";
            yield return "{";
            yield return "get { return GetValue(OutputProperty); }";
            yield return "set { SetValue(OutputProperty, value); }";
            yield return "}";

            for (int i = 0; i < c; i++)
            {
                yield return "";
                yield return string.Format("public object Input{0}", i);
                yield return "{";
                yield return "get { return GetValue(Input" + i + "Property); }";
                yield return "set { SetValue(Input" + i + "Property, value); }";
                yield return "}";
            }

            yield return "";
            yield return "private void SetOutput()";
            yield return "{";
            yield return "if (converts.Count > 0) SetOutputNonRef();";
            yield return "else if (convertRefs.Count > 0) SetOutputRef();";
            yield return "else Output = null;";
            yield return "}";
            yield return "";
            yield return "private void SetOutputNonRef()";
            yield return "{";
            yield return "Output = converts.Last()(" + Join(", ", "Input{0}", c) + ");";
            yield return "}";
            yield return "";
            yield return "private void SetOutputRef()";
            yield return "{";
            yield return "if (isUpdating) return;";
            yield return "isUpdating = true;";
            yield return "";
            yield return "object " + Join(", ", "input{0} = Input{0}", c) + ";";
            yield return "";
            yield return "Output = convertRefs.Last()(" + Join(", ", "ref input{0}", c) + ");";
            yield return "";

            for (int i = 0; i < c; i++)
            {
                yield return string.Format("Input{0} = input{0};", i);
            }

            yield return "";
            yield return "isUpdating = false;";
            yield return "}";
            yield return "}";
            yield return "}";
        }

        private static string Join(string format, int count)
        {
            return string.Join("", Enumerable.Range(0, count).Select(i => string.Format(format, i)));
        }

        private static string Join(string seperator, string format, int count)
        {
            return string.Join(seperator, Enumerable.Range(0, count).Select(i => string.Format(format, i)));
        }