		private static IEnumerable<string> GetMultipleValueConverter(int c, bool uwp)
        {
            yield return "using System.Collections.Generic;";
            yield return "using System.Linq;";

            if (uwp) yield return "using Windows.UI.Xaml;";
            else yield return "using System.Windows;";

            yield return "";

            if (uwp) yield return "namespace StdOttUwp.Converters";
            else yield return "namespace StdOttFramework.Converters";

            yield return "{";
            yield return string.Format("public delegate object ConvertInputs{0}EventHandler(", c) + Join(", ", "object input{0}", c) + ", int changedInput);";
            yield return string.Format("public delegate object ConvertInputs{0}RefEventHandler(", c) + Join(", ", "ref object input{0}", c) + ", int changedInput);";
            yield return "";
            yield return string.Format("public class MultipleInputs{0}Converter : FrameworkElement", c);
            yield return "{";
            yield return "public static readonly DependencyProperty OutputProperty = DependencyProperty.Register(\"Output\",";
            yield return string.Format("    typeof(object), typeof(MultipleInputs{0}Converter), new PropertyMetadata(null));", c);

            for (int i = 0; i < c; i++)
            {
                yield return "";
                yield return string.Format("public static readonly DependencyProperty Input{0}Property =", i);
                yield return string.Format("    DependencyProperty.Register(\"Input{0}\", typeof(object), typeof(MultipleInputs{1}Converter),", i, c);
                yield return string.Format("        new PropertyMetadata(null, new PropertyChangedCallback(OnInput{0}PropertyChanged)));\r\n", i);
                yield return "";
                yield return string.Format("private static void OnInput{0}PropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)", i);
                yield return "{";
                yield return string.Format("((MultipleInputs{0}Converter)sender).SetOutput({1});", c, i);
                yield return "}";
            }

            yield return "";
            yield return "private bool isUpdating;";
            yield return string.Format("private List<ConvertInputs{0}EventHandler> converts = new List<ConvertInputs{0}EventHandler>();", c);
            yield return string.Format("private List<ConvertInputs{0}RefEventHandler> convertRefs = new List<ConvertInputs{0}RefEventHandler>();", c);
            yield return "";
            yield return string.Format("public event ConvertInputs{0}EventHandler Convert", c);
            yield return "{";
            yield return "add";
            yield return "{";
            yield return "converts.Add(value);";
            yield return "SetOutput(-1);";
            yield return "}";
            yield return "remove";
            yield return "{";
            yield return "converts.Remove(value);";
            yield return "SetOutput(-1);";
            yield return "}";
            yield return "}";
            yield return "";
            yield return string.Format("public event ConvertInputs{0}RefEventHandler ConvertRef", c);
            yield return "{";
            yield return "add";
            yield return "{";
            yield return "convertRefs.Add(value);";
            yield return "SetOutput(-1);";
            yield return "}";
            yield return "remove";
            yield return "{";
            yield return "convertRefs.Remove(value);";
            yield return "SetOutput(-1);";
            yield return "}";
            yield return "}";
            yield return "";
            yield return "public object Output";
            yield return "{";
            yield return "get { return GetValue(OutputProperty); }";
            yield return "set { SetValue(OutputProperty, value); }";
            yield return "}";

            for (int i = 0; i < c; i++)
            {
                yield return "";
                yield return string.Format("public object Input{0}", i);
                yield return "{";
                yield return "get { return GetValue(Input" + i + "Property); }";
                yield return "set { SetValue(Input" + i + "Property, value); }";
                yield return "}";
            }

            yield return "";
            yield return "private void SetOutput(int changedIndex)";
            yield return "{";
            yield return "if (converts.Count > 0) SetOutputNonRef(changedIndex);";
            yield return "else if (convertRefs.Count > 0) SetOutputRef(changedIndex);";
            yield return "else Output = null;";
            yield return "}";
            yield return "";
            yield return "private void SetOutputNonRef(int changedIndex)";
            yield return "{";
            yield return "Output = converts.Last()(" + Join(", ", "Input{0}", c) + ", changedIndex);";
            yield return "}";
            yield return "";
            yield return "private void SetOutputRef(int changedIndex)";
            yield return "{";
            yield return "if (isUpdating) return;";
            yield return "isUpdating = true;";
            yield return "";
            yield return "object " + Join(", ", "input{0} = Input{0}", c) + ";";
            yield return "";
            yield return "Output = convertRefs.Last()(" + Join(", ", "ref input{0}", c) + ", changedIndex);";
            yield return "";

            for (int i = 0; i < c; i++)
            {
                yield return string.Format("Input{0} = input{0};", i);
            }

            yield return "";
            yield return "isUpdating = false;";
            yield return "}";
            yield return "}";
            yield return "}";
        }